services:
  financialservices-api:
    container_name: financialservices-api
    image: ${DOCKER_REGISTRY-}financialservicesapi
    build:
      context: ../
      dockerfile: ./services/FinancialServices/FinancialServices.Api/Dockerfile
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CustomSettings__DatabaseToUse=MongoDb
      - CustomSettings__EventBusToUse=RabbitMQ
            
      - CustomSettings__Database__ConnectionStrings__Default=mongodb://admin:admin@mongodb:27017/FinancialDB?authSource=admin 
      - CustomSettings__Database__DatabaseName=FinancialDB
      
      - CustomSettings__Observability_GrafanaLokiUrl=http://loki:3100
      
      - CustomSettings__EventBus__RabbitMQ__HostName=rabbitmq
      - CustomSettings__EventBus__RabbitMQ__Port=5672
      - CustomSettings__EventBus__RabbitMQ__User=admin
      - CustomSettings__EventBus__RabbitMQ__Password=admin
      - CustomSettings__EventBus__RabbitMQ__ExchangeType=topic
    depends_on:
      - mongodb
    networks:
      - app-network

  mongodb:    
    image: mongo:8
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - mongodb-data:/data/db
      - ./scripts/mongodb:/docker-entrypoint-initdb.d:ro
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_prometheus tcp_listener_port 15692"
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network

  kong-db:
    image: postgres:13
    container_name: kong-db
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong-data:/var/lib/postgresql/data
    networks:
      - app-network

  kong-bootstrap:
    container_name: kong-bootstrap  
    build:
      context: ../
      dockerfile: ./docker-compose/scripts/kong/kong-bootstrap/Dockerfile    
    depends_on:
      - kong-db    
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - app-network

  kong:
    image: kong:3.5
    container_name: kong
    restart: on-failure
    ports:
      - "8000:8000"
      - "8001:8001" # <-- Prometheus busca a porta 8001 para o Scraping
      - "8443:8443"
      - "8444:8444"      
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PLUGINS: bundled,prometheus
      KONG_PROMETHEUS_EXPORTER: on
    depends_on:
      - kong-db
      - kong-bootstrap
    networks:
      - app-network

  kong-deck:
    container_name: kong-deck
    build:
      context: ../
      dockerfile: ./docker-compose/scripts/kong/kong-deck/Dockerfile      
    depends_on:
      - financialservices-api
      - kong
    networks:
      - app-network

  konga-db:
    container_name: konga-db
    image: postgres:11
    environment:
      POSTGRES_DB: konga
      POSTGRES_USER: konga
      POSTGRES_PASSWORD: konga
    ports:
      - "5433:5432"  # <--- exportando para visualizar os dados via Datagrip (Isso não é recomendado em ambientes reais)
    volumes:
      - konga-data:/var/lib/postgresql/data
    networks:
      - app-network

  konga:
    container_name: konga
    build:
      context: ./scripts/konga
    ports:
      - "1337:1337"
    environment:
      DB_ADAPTER: postgres
      DB_HOST: konga-db
      DB_PORT: 5432
      DB_USER: konga
      DB_PASSWORD: konga
      DB_DATABASE: konga 
    depends_on:
      - konga-db
    networks:
      - app-network
 
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./scripts/grafana/provisioning:/etc/grafana/provisioning
      - ./scripts/grafana/dashboards:/etc/grafana/dashboards
    networks:
      - app-network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - prometheus-data:/prometheus
      - ./scripts/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network
      
  loki:
    container_name: loki
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yml     
    volumes:
      - ./scripts/loki/local-config.yml:/etc/loki/local-config.yml
    networks:
      - app-network
  
volumes:
  mongodb-data:
  rabbitmq_data:
  kong-data:
  konga-data:
  grafana-data:
  prometheus-data:

networks:
  app-network:
    name: app-network
    driver: bridge
